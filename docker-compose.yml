services:
  postgres:
    image: postgres:15-alpine
    container_name: chatbot-platform-postgres
    environment:
      POSTGRES_DB: chatbot_platform
      POSTGRES_USER: chatbot_user
      POSTGRES_PASSWORD: chatbot_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot_user -d chatbot_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: chatbot-platform-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  chroma:
    image: chromadb/chroma:latest
    container_name: chatbot-platform-chroma
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
      ANONYMIZED_TELEMETRY: false
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8000:8000"
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  chatbot-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: chatbot-platform-api
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://chatbot_user:chatbot_password@postgres:5432/chatbot_platform
      DATABASE_POOL_SIZE: 20
      DATABASE_ECHO: false

      # Redis Configuration
      REDIS_URL: redis://redis:6379/0

      # Chroma Configuration
      CHROMA_HOST: chroma
      CHROMA_PORT: 8000
      CHROMA_SSL: false

      # Application Configuration
      NODE_ENV: development
      LOG_LEVEL: INFO
      SHOW_DETAILED_ERRORS: true

      # API Configuration
      API_V1_STR: /api/v1
      PROJECT_NAME: "Turnkey AI Chatbot"
      VERSION: 1.0.0
      DESCRIPTION: "Enterprise chatbot platform for SMEs"

      # Security
      SECRET_KEY: your-secret-key-change-in-production
      ACCESS_TOKEN_EXPIRE_MINUTES: 30

      # CORS
      BACKEND_CORS_ORIGINS: '["http://localhost:3000", "http://localhost:8080", "http://localhost:8000"]'

      # File Upload
      MAX_FILE_SIZE_MB: 50
      ALLOWED_FILE_TYPES: "pdf,txt,docx,md"
      UPLOAD_PATH: /app/uploads

      # LLM Configuration (Optional - for testing)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}

      # Rate Limiting
      RATE_LIMIT_PER_USER_PER_MINUTE: 60
      RATE_LIMIT_GLOBAL_PER_MINUTE: 1000

      # Cache Configuration
      CACHE_SIMILARITY_THRESHOLD: 0.85
      CACHE_TTL_HOURS: 24

    volumes:
      - .:/app
      - /app/.venv  # Exclude venv from volume mount
      - upload_data:/app/uploads
      - temp_data:/app/temp
      - log_data:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  upload_data:
    driver: local
  temp_data:
    driver: local
  log_data:
    driver: local

networks:
  chatbot-network:
    driver: bridge