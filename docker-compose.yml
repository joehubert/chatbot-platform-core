services:
  postgres:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-chatbot-platform}-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chatbot_platform}
      POSTGRES_USER: ${POSTGRES_USER:-chatbot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chatbot_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chatbot_user} -d ${POSTGRES_DB:-chatbot_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:${REDIS_VERSION:-7}-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-chatbot-platform}-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  chroma:
    image: chromadb/chroma:${CHROMA_VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-chatbot-platform}-chroma
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
      ANONYMIZED_TELEMETRY: ${CHROMA_TELEMETRY:-false}
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "${CHROMA_EXTERNAL_PORT:-8001}:${CHROMA_INTERNAL_PORT:-8000}"
    networks:
      - chatbot-network
  # healthcheck:
  #   test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8000/api/v1/version || exit 1"]
  #   interval: 30s
  #   timeout: 10s
  #   retries: 5
  #   start_period: 60s

  # Builds the intial database schema and applies migrations
  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile
    command: alembic upgrade head
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-chatbot_user}:${POSTGRES_PASSWORD:-chatbot_password}@postgres:5432/${POSTGRES_DB:-chatbot_platform}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app

  chatbot-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: ${COMPOSE_PROJECT_NAME:-chatbot-platform}-api
    env_file:
      - .env
    environment:
      # Override specific environment variables that need dynamic values from other containers
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-chatbot_user}:${POSTGRES_PASSWORD:-chatbot_password}@postgres:5432/${POSTGRES_DB:-chatbot_platform}
      REDIS_URL: redis://redis:6379/${REDIS_DB:-0}
      CHROMA_HOST: chroma
      CHROMA_PORT: 8000
      # Upload path override to ensure it points to the mounted volume
      UPLOAD_PATH: /app/uploads
    volumes:
      - .:/app
      - /app/.venv  # Exclude venv from volume mount
      - upload_data:/app/uploads
      - temp_data:/app/temp
      - log_data:/app/logs
    ports:
      - "${API_EXTERNAL_PORT:-3000}:${API_INTERNAL_PORT:-8000}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_started
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_INTERNAL_PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  upload_data:
    driver: local
  temp_data:
    driver: local
  log_data:
    driver: local

networks:
  chatbot-network:
    driver: bridge