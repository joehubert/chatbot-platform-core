version: '3.8'

# ===============================================
# Chatbot Platform Core - Docker Compose
# ===============================================
# Main development environment configuration
# For production, use docker-compose.prod.yml

services:
  # ===============================================
  # Main Application
  # ===============================================
  chatbot-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: chatbot-platform-api
    ports:
      - "8000:8000"
    environment:
      # Database
      - DATABASE_URL=postgresql://chatbot_user:chatbot_password@postgres:5432/chatbot_platform
      - TEST_DATABASE_URL=postgresql://chatbot_user:chatbot_password@postgres:5432/chatbot_platform_test
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # Environment
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      
      # API Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=1
      - AUTO_RELOAD=true
      
      # CORS for development
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080,http://localhost:5173
      
      # File Storage
      - FILE_STORAGE_TYPE=local
      - UPLOAD_DIRECTORY=/app/uploads
      
      # Vector Database (using Chroma for development)
      - VECTOR_DB_TYPE=chroma
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
      
      # LLM Configuration (add your API keys)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY:-}
      
      # Model Configuration
      - RELEVANCE_MODEL=gpt-3.5-turbo
      - SIMPLE_QUERY_MODEL=gpt-3.5-turbo
      - COMPLEX_QUERY_MODEL=gpt-4
      - EMBEDDING_MODEL=text-embedding-ada-002
      
      # Communication Services (add your credentials)
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID:-}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN:-}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER:-}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL:-noreply@localhost}
      
      # Security
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      
      # Feature Flags
      - ENABLE_ANALYTICS=true
      - ENABLE_CACHING=true
      - ENABLE_RATE_LIMITING=true
      - ENABLE_AUTHENTICATION=true
      - ENABLE_VECTOR_SEARCH=true
      - ENABLE_FILE_UPLOAD=true
      
    volumes:
      - ./app:/app/app:ro
      - ./tests:/app/tests:ro
      - ./alembic:/app/alembic:ro
      - ./config:/app/config:ro
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_started
    networks:
      - chatbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===============================================
  # PostgreSQL Database
  # ===============================================
  postgres:
    image: postgres:15-alpine
    container_name: chatbot-platform-postgres
    environment:
      - POSTGRES_DB=chatbot_platform
      - POSTGRES_USER=chatbot_user
      - POSTGRES_PASSWORD=chatbot_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_test_db.sql:/docker-entrypoint-initdb.d/init_test_db.sql:ro
    networks:
      - chatbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot_user -d chatbot_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # ===============================================
  # Redis Cache
  # ===============================================
  redis:
    image: redis:7-alpine
    container_name: chatbot-platform-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - chatbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf

  # ===============================================
  # Chroma Vector Database
  # ===============================================
  chroma:
    image: chromadb/chroma:latest
    container_name: chatbot-platform-chroma
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - ANONYMIZED_TELEMETRY=false
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - chatbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===============================================
  # Ollama (Local LLM) - Optional
  # ===============================================
  ollama:
    image: ollama/ollama:latest
    container_name: chatbot-platform-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - chatbot-network
    restart: unless-stopped
    profiles:
      - local-llm
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # ===============================================
  # Monitoring - Prometheus (Optional)
  # ===============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: chatbot-platform-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - chatbot-network
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # ===============================================
  # Monitoring - Grafana (Optional)
  # ===============================================
  grafana:
    image: grafana/grafana:latest
    container_name: chatbot-platform-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - chatbot-network
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # ===============================================
  # Background Tasks - Celery Worker (Optional)
  # ===============================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: chatbot-platform-celery-worker
    environment:
      - DATABASE_URL=postgresql://chatbot_user:chatbot_password@postgres:5432/chatbot_platform
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
    volumes:
      - ./app:/app/app:ro
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - chatbot-network
    restart: unless-stopped
    profiles:
      - background-tasks
    command: celery -A app.core.celery worker --loglevel=info --concurrency=2

  # ===============================================
  # Background Tasks - Celery Beat (Optional)
  # ===============================================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: chatbot-platform-celery-beat
    environment:
      - DATABASE_URL=postgresql://chatbot_user:chatbot_password@postgres:5432/chatbot_platform
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
    volumes:
      - ./app:/app/app:ro
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      - postgres
      - redis
    networks:
      - chatbot-network
    restart: unless-stopped
    profiles:
      - background-tasks
    command: celery -A app.core.celery beat --loglevel=info --pidfile=/tmp/celerybeat.pid

  # ===============================================
  # Background Tasks - Flower Monitoring (Optional)
  # ===============================================
  celery-flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: chatbot-platform-celery-flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis
    networks:
      - chatbot-network
    restart: unless-stopped
    profiles:
      - background-tasks
    command: celery -A app.core.celery flower --port=5555

# ===============================================
# Networks
# ===============================================
networks:
  chatbot-network:
    driver: bridge
    name: chatbot-platform-network

# ===============================================
# Volumes
# ===============================================
volumes:
  postgres_data:
    driver: local
    name: chatbot-platform-postgres-data
  
  redis_data:
    driver: local
    name: chatbot-platform-redis-data
  
  chroma_data:
    driver: local
    name: chatbot-platform-chroma-data
  
  ollama_data:
    driver: local
    name: chatbot-platform-ollama-data
  
  prometheus_data:
    driver: local
    name: chatbot-platform-prometheus-data
  
  grafana_data:
    driver: local
    name: chatbot-platform-grafana-data
  
  uploads_data:
    driver: local
    name: chatbot-platform-uploads
  
  logs_data:
    driver: local
    name: chatbot-platform-logs
  
  celery_beat_data:
    driver: local
    name: chatbot-platform-celery-beat